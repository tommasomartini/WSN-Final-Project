/*  Measure generated by a sensor node which is spread among storage node through random walk
*/
#ifndef __MEASURE_H__  
#define __MEASURE_H__  

#include <vector>

#include "message.h"

class Measure : public Message {
 public:
  enum MeasureTypes {
    measure_type_new,  // single measure
    measure_type_update  // XOR of new measure and old measure
  };

  unsigned char measure_;
  unsigned int measure_id_;  // id of this measure
  unsigned int source_sensor_id_;  // id of the sensor who generated this measure
  unsigned int hop_counter_;
  Measure::MeasureTypes measure_type_;
  
 public: 
  Measure();  // Cannot remove. Needed in SensorNode::SensorNode()
  Measure(unsigned char /*measure*/);   // TODO to remove??
  Measure(unsigned char, unsigned int /*measure_id*/, unsigned int /*source_sensor_id*/, Measure::MeasureTypes);

  // getters
  unsigned char get_measure() {return measure_;}
  unsigned int get_measure_id() {return measure_id_;}
  unsigned int get_source_sensor_id() {return source_sensor_id_;}
  int get_hop_counter() {return hop_counter_;}
  Measure::MeasureTypes get_measure_type() {return measure_type_;}

  // setters
  // void set_measure(unsigned char /*measure*/);
  // void set_source_sensor_id(unsigned int);
  // void set_measure_type(Measure::MeasureTypes);

  // functions
  unsigned int increase_hop_counter();
  unsigned int get_message_size();
};

#endif
