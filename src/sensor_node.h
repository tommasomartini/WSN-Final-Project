#ifndef __SENSOR_NODE_H__   
#define __SENSOR_NODE_H__ 

#include <vector> 

#include "node.h"
#include "my_toolbox.h"
#include "measure.h"

class Message;
class StorageNode;
class Event;

class SensorNode: public Node {
 public:
  SensorNode (unsigned int node_id) : Node (node_id) {measure_id_ = 0;}  // TODO remove
  SensorNode (unsigned int node_id, double y_coord, double x_coord);

  // setters
  // void set_measure(Measure);  // TODO remove

  // getters
  // Measure get_measure() {return measure_;}    // TODO remove. Qundo lo uso??

  // Event execution methods
  std::vector<Event> generate_measure(); // Tom
  std::vector<Event> try_retx(Message*); // Tom
  std::vector<Event> sensor_ping(); // Tom
  std::vector<Event> sensor_ping2(); // fast and simple way
  std::vector<Event> sensor_ping(int); // Arianna
  
  void set_supervisor();	// this function has to be called at the beginning of the program, after the network initialization
  
  unsigned int get_my_supervisor_id() {return my_supervisor_id_;}	// TODO just for debug

 private:
  typedef MyToolbox::MyTime MyTime;

  Measure measure_;   // measure generated by the sensor
  unsigned char old_measure_data = 0;
  unsigned char new_measure_data = 0;
  unsigned int my_supervisor_id_;
  unsigned int measure_id_ = 0;
  bool first_generated_measure_;

  std::vector<Event> send_measure(StorageNode*); // TODO DEPRECATED
  std::vector<Event> send(StorageNode*, Message*);	// TODO to remove
  std::vector<Event> send2(unsigned int /*next node id*/, Message*);
  std::vector<Event> re_send(Message*);
//  unsigned int get_random_neighbor();

  int new_measure_id();
  unsigned char get_measure_data();
};

#endif
