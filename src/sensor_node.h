/*

*/

#ifndef __SENSOR_NODE_H_INCLUDED__   // if x.h hasn't been included yet...
#define __SENSOR_NODE_H_INCLUDED__   //   #define this so the compiler knows it has been included

#include "node.h"
#include "message.h"
#include <thread>
#include <chrono>

using namespace std;

class SensorNode: public Node {

  Message message_;   // measure generated by the sensor
  thread thread_;     // the independent thread generating measures
  bool running_ = false;  // states whether the sensor is active or not

 public:
  typedef std::chrono::milliseconds Interval;
  typedef std::function<void(void)> Timeout;  // generic function. 

  SensorNode (int node_id) : Node (node_id) {}
  SensorNode (int node_id, double y_coord, double x_coord) : Node (node_id, y_coord, x_coord) {}

  void set_message(Message);
  Message get_message() {return message_;}
  /*  switches on the sensor and makes it start collecting data
      Params:
        - &interval: interval in ms between two measure generations
        - &timeout: function to be executed when timeout occurs
  */
  // void activate_sensor(const Interval &interval, const Timeout &timeout);
  void activate_sensor(const Interval &interval, const Timeout &timeout);
  void activate_sensor();  
  void stop_sensor();
  Message generate_data();
};

#endif
